#!/usr/bin/env bash

VERBOSE=0
CMD="summary"

function show-help() {
  echo "Usage: $0 [-v] [-c CMD] DBNAME [... DBNAME]"
  echo
  echo "Where CMD is one of"
  echo
  echo " summary - index statistics summary (default)"
  echo " detailed - detailed index statistics"
  echo " duplicated - finds duplicate indexes"
  echo " unused - finds unused indexes"
  echo
  echo "Options:"
  echo
  echo " -v - verbose"
  echo
  echo "You may want to set some things like PGPASSWORD, PGUSER, etc."
  echo "when connecting."
}

while getopts ":vhc:" OPT; do
  case $OPT in
    v)
      VERBOSE=1
      ;;
    c)
      CMD=$OPTARG
      ;;
    *)
      show-help
      exit
      ;;
  esac
done
shift $((OPTIND-1))

case $CMD in
  detailed) ;;
  summary) ;;
  duplicated) ;;
  unused) ;;
  *)
    show-help
    exit
    ;;
esac

if [ $# -eq 0 ]; then
  show-help
  exit
fi

for DBNAME in $@; do
  echo "Connecting to $DBNAME"
  SQL="SELECT array_to_string(array_agg(nspname), ',') FROM pg_namespace WHERE NOT nspname ~* '^pg_';"
  SCHEMAS=`psql -d $DBNAME -t -c "$SQL"`

  case $CMD in
    summary)
      SQL="
SET search_path = $SCHEMAS;
SELECT
  pg_class.relname,
  CAST(pg_class.reltuples AS integer) AS num_rows,
  count(indexname) AS number_of_indexes,
  CASE WHEN x.is_unique = 1 THEN 'Y'
     ELSE 'N'
  END AS UNIQUE,
  SUM(
    CASE WHEN number_of_columns = 1 THEN
      1
    ELSE
      0
    END
  ) AS single_column,
  SUM(
    CASE WHEN number_of_columns IS NULL THEN
      0
    WHEN number_of_columns = 1 THEN
      0
    ELSE
      1
    END
  ) AS multi_column
FROM pg_namespace
LEFT OUTER JOIN pg_class ON pg_namespace.oid = pg_class.relnamespace
LEFT OUTER JOIN (
  SELECT
    indrelid,
    max(CAST(indisunique AS integer)) AS is_unique
  FROM pg_index
    GROUP BY indrelid
  ) x
ON pg_class.oid = x.indrelid
LEFT OUTER JOIN (
  SELECT
    c.relname AS ctablename,
    ipg.relname AS indexname,
    x.indnatts AS number_of_columns
  FROM
    pg_index x
  JOIN pg_class c ON c.oid = x.indrelid
  JOIN pg_class ipg ON ipg.oid = x.indexrelid
) AS foo
ON pg_class.relname = foo.ctablename
WHERE
  NOT pg_namespace.nspname ~* '^pg_'
    AND
  pg_class.relkind = 'r'
GROUP BY pg_class.relname, pg_class.reltuples, x.is_unique
ORDER BY 1, 2;"
      ;;

    detailed)
      SQL="
SET search_path = $SCHEMAS;
SELECT
  t.tablename,
  indexname,
  CAST (c.reltuples AS integer) AS num_rows,
  pg_size_pretty(pg_relation_size(quote_ident(t.tablename)::text)) AS table_size,
  pg_size_pretty(pg_relation_size(quote_ident(indexrelname)::text)) AS index_size,
  CASE WHEN x.is_unique = 1  THEN 'Y'
     ELSE 'N'
  END AS UNIQUE,
  idx_scan AS number_of_scans,
  idx_tup_read AS tuples_read,
  idx_tup_fetch AS tuples_fetched
FROM pg_tables t
LEFT OUTER JOIN
  pg_class c ON t.tablename=c.relname
LEFT OUTER JOIN (
  SELECT indrelid,
     max(CAST(indisunique AS integer)) AS is_unique
   FROM pg_index
     GROUP BY indrelid
) x
ON c.oid = x.indrelid
LEFT OUTER JOIN (
  SELECT c.relname AS ctablename,
    ipg.relname AS indexname,
    x.indnatts AS number_of_columns,
    idx_scan,
    idx_tup_read,
    idx_tup_fetch,
    indexrelname
  FROM pg_index x
  JOIN pg_class c ON c.oid = x.indrelid
  JOIN pg_class ipg ON ipg.oid = x.indexrelid
  JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid
) AS foo
  ON t.tablename = foo.ctablename
WHERE t.schemaname in (SELECT nspname FROM pg_namespace WHERE NOT nspname ~* '^pg_')
ORDER BY 1, 2;"
      ;;

    duplicated)
      SQL="
SET search_path = $SCHEMAS;
SELECT pg_size_pretty(sum(pg_relation_size(idx))::bigint) AS size,
  (array_agg(idx))[1] AS idx1, (array_agg(idx))[2] AS idx2,
  (array_agg(idx))[3] AS idx3, (array_agg(idx))[4] AS idx4
FROM (
  SELECT indexrelid::regclass AS idx,
    (indrelid::text || E'\n' || indclass::text || E'\n' || indkey::text || E'\n' ||
      coalesce(indexprs::text,'') || E'\n' || coalesce(indpred::text,'')
    ) AS KEY
  FROM pg_index
) sub
GROUP BY KEY HAVING count(*)>1
ORDER BY sum(pg_relation_size(idx)) DESC;"
      ;;

    unused)
      SQL="
SELECT
  idstat.relname AS table_name,
  indexrelname AS index_name,
  idstat.idx_scan AS times_used,
  pg_size_pretty(pg_relation_size(idstat.relname::regclass)) AS table_size,
  pg_size_pretty(pg_relation_size(indexrelname::regclass)) AS index_size,
  n_tup_upd + n_tup_ins + n_tup_del as num_writes,
  indexdef AS definition
FROM
  pg_stat_user_indexes AS idstat
JOIN pg_indexes ON indexrelname = indexname
JOIN pg_stat_user_tables AS tabstat ON idstat.relname = tabstat.relname
WHERE
  indexdef !~* 'unique'
ORDER BY idstat.relname, indexrelname;"
      ;;
  esac

  [[ $VERBOSE == 1 ]] && echo $SQL

  psql -d $DBNAME -c "$SQL"
done
