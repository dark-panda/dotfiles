#!/usr/bin/env ruby

require "shellwords"
require "optparse"
require "array-statistics"

begin
  require 'term/ansicolor'
rescue LoadError
  puts 'Term::ANSIColor not found'
end

def obfuscate(str)
  str.gsub(/@/, " at the ").gsub(/\.(\w+)(>|$)/, ' dot \1s\2')
end

class ::Array
  def median
    return @median if @median

    arr = self.sort

    @median = if arr.length.even?
      (arr[arr.length / 2] + arr[arr.length/2 - 1]) / 2
    else
      arr[arr.length / 2]
    end
  end

  def sum
    @sum ||= inject(0, &:+)
  end

  def average
    @average ||= (sum / length).round(3)
  end

  def mode
    return @mode if @mode

    freq = each_with_object(Hash.new(0)) { |v, memo| memo[v] += 1 }
    max = freq.values.max
    @mode = freq.select { |k, f| f == max }
  end

  def sample_variance
    sum = inject(0) { |accum, i| accum + (i - mean) ** 2 }
    sum / (length - 1).to_f
  end

  def standard_deviation
    return Math.sqrt(sample_variance)
  end
end

def term_columns
  return @term_columns if defined?(@term_columns)

  columns = `tput cols`

  @term_columns = if $? == 0 && columns
    [ columns.to_i - 10, 80 ].min
  end
end

def create_totals_hash
  Hash.new { |hash, k| hash[k] = [] }
end

if defined?(Term::ANSIColor)
  def color(m, fg = nil, bg = nil)
    m = Term::ANSIColor.send(bg) { m } if bg
    m = Term::ANSIColor.send(fg) { m } if fg
  end
else
  def color(m, *)
    m
  end
end

commits = {}
lines = {}
lines_added = create_totals_hash
lines_deleted = create_totals_hash

options = {
  mailmap: true,
  verbose: true
}

OptionParser.new do |opts|
  opts.on("-v", "--[no-]verbose", "Verbose") { |v| options[:verbose] = v }
  opts.on("-s", "--[no-]stat", "Show stat graph") { |v| options[:stat] = v }
  opts.on("--[no-]more", "Show more details") { |v| options[:more] = v }
  opts.on("-o", "--[no-]obfuscate", "Obfuscate") { |v| options[:obfuscate] = v }
  opts.on("-m", "--[no-]use-mailmap", "Use mailmap") { |v| options[:mailmap] = v }
  opts.on("-e", "--show-email", "Display email") { |v| options[:email] = v }
  opts.on("-c", "--commits", "Sort by commits") { |v| options[:commits] = true }
  opts.on("--since", "Since") { |v| options[:since] = v }
  opts.on("--before", "Before") { |v| options[:before] = v }
end.parse!

args = ARGV.collect(&:shellescape)

contributor_format = if options[:mailmap]
  if options[:email]
    '%aN - %aE'
  else
    '%aN'
  end
elsif options[:email]
  '%ae'
else
  '%an - %ae'
end

cmd = %{git log --format="Author: #{contributor_format}" --numstat #{args.join(' ')}}

puts cmd

# cmd += " --since #{options[:since]}" if options[:since]
# cmd += " --before #{options[:before]}" if options[:before]

author = nil

`#{cmd}`.each_line do |l|
  begin
    case
    when l =~ /^Author: (.*)$/
      author = $1
      lines[author] ||= 0
      commits[author] ||= 0
      commits[author] += 1
    else
      adds, dels, file = l.split(/\t/)
      adds = adds.to_i
      dels = dels.to_i

      if file
        lines_added[author] << adds
        lines_deleted[author] << dels
        lines[author] += adds + dels
      end
    end
  rescue ArgumentError
    next
  end
end

to_sort = if options[:commits]
  commits
else
  lines
end

to_sort.sort_by { |_, c| -c }.each do |author, c|
  a = if options[:obfuscate]
    obfuscate(author)
  else
    author
  end

  if options[:verbose]
    puts "#{a}: #{lines[author]} lines of diff, #{commits[author]} commits"
  else
    puts a
  end

  if options[:stat]
    print '  '
    print color('+' * (lines_added[author].sum / lines[author].to_f * term_columns).floor, 'green')
    print color('-' * (lines_deleted[author].sum / lines[author].to_f * term_columns).floor, 'red')
    2.times { puts }
  end

  if options[:more]
    more_proc = proc { |label, values|
      puts "  - #{label}:"
      puts "    - Total: #{values[author].sum}"
      puts "    - Average: #{values[author].average}"
      puts "    - Standard deviation: #{values[author].standard_deviation.round(3)}"
      puts "    - Median: #{values[author].median}"
      puts "    - Max: #{values[author].max}"
      puts "    - Min: #{values[author].min}"
      puts
    }

    more_proc.call("Additions", lines_added)
    more_proc.call("Deletions", lines_deleted)
  end
end

puts

puts "#{lines.values.sum} total lines changed"
puts "#{commits.values.sum} total commits"

if options[:more]
  puts "#{lines_added.values.flatten.sum} total additions"
  puts "#{lines_deleted.values.flatten.sum} total deletions"
end

  # puts "#{lines.values.sum} total lines changed"
  # puts "#{commits.values.sum} total commits"
